const assert = require('assert');const proxyquire = require('proxyquire');const showTweets = proxyquire('../showTweets', { './formatDate': () => '12:00' });const sinon = require('sinon');const nock = require('nock');const chai = require('chai');const expect = chai.expect;const chaiAsPromised = require('chai-as-promised');chai.use(chaiAsPromised);describe('showTweets', () => {    it('should log tweets on successfull request', () => {		const log = sinon.spy(console, 'log');		const mockData = [			{				"created_at": "2017-04-25T15:09:10.609Z",				"text": "Библиотека #nock позволяет не только удобно писать тесты, но и вести разработку фронтеда, в то время, когда бекенд ещё только проектируется! #urfu-testing-2016"			}		];		nock('https://api.twitter.com')			.get('/1.1/search/tweets.json?q=%23urfu-testing-2016.com')			.reply(200, JSON.stringify(mockData));		return showTweets().then(() => {			assert(log.calledWith('12:00'));			assert(log.calledWith(mockData[0].text));		});	});			it('should throw error on invalid JSON', () => {		nock('https://api.twitter.com')			.get('/1.1/search/tweets.json?q=%23urfu-testing-2016.com')			.reply(200, '{"a":');					return expect(showTweets()).to.be.rejectedWith('Failed to parse JSON');			});	it('should throw "API responsed with statusCode" error', () => {		nock('https://api.twitter.com')			.get('/1.1/search/tweets.json?q=%23urfu-testing-2016.com')			.reply(400);					return expect(showTweets()).to.be.rejectedWith('API responsed with 400');	});});